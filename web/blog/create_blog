rails 2.2.3

create new project
$ rails blog (or ralis blog -d postgresql)

configuring a database
$ cd blog
$ vi config/database.yml

install postgresql
$ sudo apt-get install postgresql
$ sudo passwd postgres
(develop)
$ su postgres
$ psql

install postgresql adapter (activerecord-postgresql-adapter)
$ sudo apt-get install libpqxx-dev (c++ library to connect to postgresql)
$ sudo gem install pg

switch user of database.yml 

$ rake db:create

connect database
$ psql database_name
database_name=# \db
database_name=# \d

start server
$ ruby script/server (need user of database.yml)

say "hello"
$ ruby script/generate controller home index

set app home
$ mv public/index.html public/index.hml.bak
$ vi config/routes.rb

quickly with scaffolding
$ ruby script/generate scaffold Post name:string title:string content:text

$ rake db:migrate

add validation (diff rails 3)
$ vi app/models/post.rb

use console
$ ruby script/console (need user)
Post.create (ralis Post.new)

list all posts

debug
$ vi app/views/posts/show.html.erb

ruby-debug
$ gem install ruby-debug 
$ vi config/environments/development.rb (not need --debugger)
$ vi app/controller/posts_controller.rb
$ ruby script/server --debugger
you can rdb in console
(rdb ) help 

logger
$ vi config/environment.rb (or environment file, common up)
$ vi app/controllers/posts_controller.rb (sending messages)
look the log/environment_name.log (message)

debugging memory leaks
$ gem install break_house
$ vi config/environment.rb
$ RAILS_ENV=production BLEAK_HOUSE=1 ruby-bleak-house script/server

add a second model
:! script/generate model Comment commenter:string body:text post:references (in vim)
:! rake db:migrate (but need postgres user)
edit post.rb
edit config/routes.rb
generate controller 
code

use partials to eliminate view
add app/views/posts/_form_.html.erb
modify app/views/posts/
